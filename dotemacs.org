# Filename: dotemacs.org
# Note:     My Emacs personality.
* About
  My Emacs configuration written in literate programming style that would make
  Donald Knuth proud. Hopefully easier to read than a plain Elisp file. I try to
  keep a lightweight config, separating default and third party settings for
  easier debugging. I don't like the idea of using too many plugins, so I try to
  keep them spare.
* Launch
  発信準備!
** Lexical Binding
   By default, Elisp does not have lexical binding, /i.e./ variable scope based on
   text position which virtually every other mainstream language has. So let's
   enable it. Note, make sure to have them set /at the beginning/ of this section
   to affect the rest of this config.
   #+BEGIN_SRC emacs-lisp
     ;; -*- lexical-binding: t -*-
   #+END_SRC
** Speedup Startup - /You Can (Not) Hack This GC/
   Speedup that init time by overloading the garbage collector.

   You stole these ideas from.
   - https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org
   - https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#how-does-doom-start-up-so-quickly
   - https://so.nwalsh.com/2020/02/29/dot-emacs
   #+BEGIN_SRC emacs-lisp
     (setq package-enable-at-startup nil
           site-run-file nil
           gc-cons-threshold 50000000 ; NOTE: 50 MB. If too big, we lose the speedup.
           gc-cons-percentage 0.9)

     ;; NOTE: Restore default garbage collection settings.
     (add-hook 'emacs-startup-hook (lambda ()
                                     (setq gc-cons-threshold 800000
                                           gc-cons-percentage 0.1)))
   #+END_SRC
** Scratch Buffer
   Get in the text editor, 碇君!
   #+BEGIN_SRC emacs-lisp
     (setq initial-scratch-message
           ";; God's in his heaven. All's right with the world. ")
   #+END_SRC
* Vanilla
  Stock Emacs settings.
** _Defaults
   Commonly referenced default settings. Note, make sure to set them /towards the
   beginning/ of this section to avoid undefined reference errors.
*** Variables
    #+BEGIN_SRC emacs-lisp
      (setq uvar:default-column 80
            uvar:default-indent 4)
    #+END_SRC
*** Functions
    Homebrewed Lisp.
    #+BEGIN_SRC emacs-lisp
      (defun ufun:add-word-to-dictionary ()
        "Add the word-at-point to aspell's dictionary."
        (interactive)
        (let ((current-location (point)) (word (flyspell-get-word)))
          (when (consp word)
            (flyspell-do-correct 'save
                                 nil
                                 (car word)
                                 current-location
                                 (cadr word)
                                 (caddr word)
                                 current-location))))

      (defun ufun:create-keybindings (keymap keybindings)
        "Create KEYBINDINGS based on an existing KEYMAP."
        (dolist (binding keybindings)
          (define-key keymap
            (kbd (car binding)) (cdr binding))))

      (defun ufun:create-leader-local-keybindings (leader hook keymap keybindings)
        "Create KEYBINDINGS associated with a LEADER key based on an extant KEYMAP for
      an extant HOOK.

      This function exists to provide a (hopefully) lightweight solution to third
      party packages like Evil-Leader and General.

      Online resources used to learn about backticks in Emacs Lisp.
      - https://stackoverflow.com/questions/30150186/what-does-backtick-mean-in-lisp
      - https://stackoverflow.com/questions/26613583/emacs-use-add-hook-inside-function-defun"
        (progn
          (define-prefix-command keymap)
          (add-hook hook `(lambda () (local-set-key (kbd ,leader) ,keymap)))
          (ufun:create-keybindings keymap keybindings)))

      (defun ufun:create-leader-evil-keybindings (leader mode vimode keymap keybindings)
        "Create KEYBINDINGS associated with a LEADER key based on an extant KEYMAP for
      an extant MODE map under a VIMODE context.

      This function will only work for Evil keybindings and exacts a vi motion state
      i.e. VIMODE for which these keybindings apply.

      This function exists to provide a (hopefully) lightweight solution to third
      party packages like Evil-Leader and General."
        (progn
          (define-prefix-command keymap)
          (evil-define-key* vimode mode (kbd leader) keymap) ; NOTE: Don't use the macro!
          (ufun:create-keybindings keymap keybindings)))

      (defun ufun:goto-previous-buffer ()
        "Return to the previously visited buffer. This function is interactive."
        (interactive)
        (switch-to-buffer (other-buffer (current-buffer) 1)))

      (defun ufun:kill-filepath ()
        "Copy the current buffer filename with path to clipboard. This function is
      interactive."
        (interactive)
        (let ((filepath (if (equal major-mode 'dired-mode)
                            default-directory
                          (buffer-file-name))))
          (when filepath
            (kill-new filepath)
            (message "Copied buffer filepath '%s' to clipboard." filepath))))

      (defun ufun:org-archive-confirm ()
        "Provide an interactive call to `org-archive-subtree' with a single prefix
      argument, C-u in this case.

      Programmatically, passing 4 as an argument to `org-archive-subtree' achieves the
      same thing as calling C-u once. I.e. a single FIND-DONE for the
      `org-archive-subtree' method."
        (interactive)
        (org-archive-subtree '(4)))
    #+END_SRC
** _Disable
   Shut. It. Off!
   #+BEGIN_SRC emacs-lisp
     (setq flyspell-duplicate-distance 0 ; NOTE: Does not work on Emacs 27.2 on Mac.
           inhibit-startup-screen t
           vc-handled-backends nil)

     (global-hl-line-mode -1)
     (menu-bar-mode -1)
     (scroll-bar-mode -1)
     (tool-bar-mode -1)
   #+END_SRC
** Cursor
   Mousing around.
   #+BEGIN_SRC emacs-lisp
     (blink-cursor-mode 1)
     (delete-selection-mode t)
     (setq blink-cursor-blinks 30
           mouse-drag-copy-region nil
           mouse-wheel-follow-mouse t
           mouse-wheel-progressive-speed nil
           mouse-wheel-scroll-amount '(2 ((shift) . 1))
           scroll-bar-adjust-thumb-portion nil) ; NOTE: This only works on X11.
   #+END_SRC
** Custom Settings
   Designate a separate file for custom-set-variables under .emacs.d, name it
   custom.el, and load the file on startup.
   #+BEGIN_SRC emacs-lisp
     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
     (load custom-file 'noerror)
   #+END_SRC
** Dired
   Better than NETRW.
   #+BEGIN_SRC emacs-lisp
     (setq dired-listing-switches "-alo")
   #+END_SRC
** Frame
   Emacs Frames are basically Windows in almost every other editor. A Frame
   contains a Buffer, where all the magic happens.

   These settings configure things within a Frame except the Buffer like...
   00. Startup Frame size
   01. Transparency
   02. Scroll bar
   03. Line numbers column width
   04. Minibuffer line truncation
   #+BEGIN_SRC emacs-lisp
     (setq initial-frame-alist '((width . 90) (height . 35)))

     ;; NOTE: Render non-focused frames transparent. I.e. when setting the alpha (transparency level), the first and second numbers indicate focused and unfocused transparency respectively. 100 alpha means opaque.
     (set-frame-parameter (selected-frame) 'alpha '(100 . 95))
     (add-to-list 'default-frame-alist '(alpha . (100 . 95)))

     (setq-default column-number-indicator-zero-based nil
                   fill-column uvar:default-column)
     (setq column-number-mode t
           display-line-numbers-grow-only t)

     (add-hook 'minibuffer-setup-hook '(lambda () (setq truncate-lines nil)))
   #+END_SRC
** File IO
   Emacs file loading behavior.
   #+BEGIN_SRC emacs-lisp
     (setq auto-save-default nil
           create-lockfiles nil
           make-backup-files nil)
     (global-auto-revert-mode 1)
   #+END_SRC
** Ibuffer
   Interactive buffer menu.
   #+BEGIN_SRC emacs-lisp
     (setq ibuffer-default-sorting-mode 'filename/process
           ibuffer-default-sorting-reversep t)
   #+END_SRC
** Ido
   Interactive do.
   #+BEGIN_SRC emacs-lisp
     (setq ido-auto-merge-work-directories-length -1
           ido-case-fold t
           ido-enable-flex-matching t
           ido-everywhere t)
     (ido-mode 1)
   #+END_SRC
** Isearch
   Be really cool if you didn't have to keep spamming Ctrl.
   #+BEGIN_SRC emacs-lisp
     (setq uvar:isearch-mode-keybindings
           '(("<up>"   . isearch-repeat-backward)
             ("<down>" . isearch-repeat-forward)))

     (add-hook 'isearch-mode-hook
               '(lambda ()
                  (dolist (bindings uvar:isearch-mode-keybindings)
                    (define-key isearch-mode-map
                      (kbd (car bindings)) (cdr bindings)))))
   #+END_SRC
** Keybindings
   A pinch of jk.
   #+BEGIN_SRC emacs-lisp
     (add-hook 'ibuffer-mode-hook '(lambda () (local-set-key (kbd "j") 'next-line)))
     (add-hook 'ibuffer-mode-hook '(lambda () (local-set-key (kbd "k") 'previous-line)))

     (add-hook 'package-menu-mode-hook '(lambda () (local-set-key (kbd "j") 'next-line)))
     (add-hook 'package-menu-mode-hook '(lambda () (local-set-key (kbd "k") 'previous-line)))
   #+END_SRC
** Org
   One of these days, I'm gonna get organizized.
   #+BEGIN_SRC emacs-lisp
     (setq org-enforce-todo-dependencies t
           org-hide-emphasis-markers t
           org-src-fontify-natively t
           org-src-tab-acts-natively t
           org-startup-folded t
           org-time-stamp-formats '("<%Y_%m_%d %a>" . "<%Y_%m_%d %a %H:%M>")
           org-todo-keywords '((sequence "TODO(t)"
                                         "IN-PROGRESS(p!)"
                                         "BLOCKED(b@/!)"
                                         "SOMEDAY(s@/!)"
                                         "|"
                                         "DONE(d!)"
                                         "CANCELED(c@/!)"))
           org-use-fast-todo-selection t)
     (add-hook 'org-mode-hook '(lambda () (setq-local fill-column uvar:default-column)))
   #+END_SRC
** Platform
   Mac, Linux, Windows Trinity.

   Nothing here. Anymore.
** Programming Language Modes
   Settings for default programming languages modes and anything text.
   #+BEGIN_SRC emacs-lisp
     (add-hook 'emacs-lisp-mode-hook 'prettify-symbols-mode)

     (add-hook 'js-mode-hook 'prettify-symbols-mode)
     (add-hook 'js-mode-hook '(lambda () (push '("=>" . "\u21d2") prettify-symbols-alist))) ; TODO: Move symbol codes into separate section.

     (add-hook 'latex-mode-hook '(lambda () (setq-local fill-column uvar:default-column)))
     (add-hook 'latex-mode-hook 'flyspell-mode)

     (add-hook 'nxml-mode-hook '(lambda () (setq nxml-attribute-indent uvar:default-indent)))
     (add-hook 'nxml-mode-hook '(lambda () (setq nxml-child-indent     uvar:default-indent)))

     (setq sh-indentation uvar:default-indent)

     (add-hook 'text-mode-hook '(lambda () (setq-local fill-column 72))) ; NOTE: Blame Git!
     (add-hook 'text-mode-hook 'flyspell-mode)
     (add-to-list 'auto-mode-alist '("COMMIT_EDITMSG" . text-mode))
   #+END_SRC
** Server
   イーマックスの悪魔!
   #+BEGIN_SRC emacs-lisp
     (require 'server)
     (unless (server-running-p) (server-start))
   #+END_SRC
** Tetris
   We needed this.
   #+BEGIN_SRC emacs-lisp
     (add-hook 'tetris-mode-hook
               '(lambda ()
                  (ufun:create-keybindings
                   tetris-mode-map
                   '(("," . tetris-rotate-prev)
                     ("a" . tetris-move-left)
                     ("o" . tetris-move-down)
                     ("e" . tetris-move-right)))))
   #+END_SRC
** Text
   Plain text behavior.
*** Encoding
    We want Unicode!
    #+BEGIN_SRC emacs-lisp
      (prefer-coding-system 'utf-8)
      (set-default-coding-systems 'utf-8)
      (set-language-environment "UTF-8")
      (setq default-buffer-file-coding-system 'utf-8)
    #+END_SRC
*** Formatting
    Like how it looks and such.
    #+BEGIN_SRC emacs-lisp
      (set-frame-font "Iosevka-14" nil t) ; NOTE: Make sure the OS has this installed!

      (setq require-final-newline t
            show-paren-delay 0
            sentence-end-double-space nil)

      (show-paren-mode 1)
      (add-hook 'prog-mode-hook 'subword-mode)

      (setq-default indent-tabs-mode nil
                    tab-width uvar:default-indent)
      (setq c-basic-offset uvar:default-indent)
    #+END_SRC
*** Spellcheck
    I need the computer to tell me!
    #+BEGIN_SRC emacs-lisp
      (cond ((equal system-type 'gnu/linux)
             (setq ispell-program-name "/usr/bin/aspell"))
            ((equal system-type 'darwin)
             (setq ispell-program-name "/usr/local/bin/aspell")))
    #+END_SRC
*** Whitespace
    #+BEGIN_SRC emacs-lisp
      (setq-default whitespace-line-column nil) ; NOTE: Use fill-column setting.
      (add-hook 'before-save-hook 'whitespace-cleanup)
    #+END_SRC
** User Input
   #+BEGIN_SRC emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
     (setq visible-bell 1)
   #+END_SRC
* Not Vanilla
  Settings for third party Elisp packages.
** Proxy Configuration
   Configure proxy settings /before/ attempting to install any third party
   packages.
   #+BEGIN_SRC emacs-lisp
     ;; E.g.
     ;; (setq url-proxy-services
     ;;       '(("http"  . "work.proxy.com:8080")
     ;;         ("https" . "work.proxy.com:8080")))
   #+END_SRC
** Packages
   Milkypostman Store.
   #+BEGIN_SRC emacs-lisp
     ;; TODO: Refactor this code so that it correctly installs missing packages.
     (require 'package)
     (package-initialize)
     (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

     (when (not package-archive-contents)
       (package-refresh-contents))

     (dolist (packages '(evil
                         evil-escape
                         json-mode
                         markdown-mode
                         kuronami-theme
                         org-bullets
                         rust-mode
                         toml-mode
                         undo-fu))
       (when (not (package-installed-p packages))
         (package-install packages)))
   #+END_SRC
** Aesthetic
   I wanted to harvest the rice.
   I wanted to hold Tsubame more.
   I wanted to be with the boy I liked.
   Forever.
   #+BEGIN_SRC emacs-lisp
     (load-theme 'kuronami t)
   #+END_SRC

   What are you trying to tell me? That I can dodge bullets?!
   #+BEGIN_SRC emacs-lisp
     (require 'org-bullets)
     (add-hook 'org-mode-hook 'org-bullets-mode)
   #+END_SRC
** Evil
   Summon the Editor of the Beast - /VI VI VI./

   Keybindings tuned for EN-Dvorak. Don't change default vi/Vim (too much).

   This configuration uses custom vanilla Emacs Lisp code to recreate vi leader
   keybinding features that third party packages like "Evil Leader" and
   "General" provide using a lot more code (I /think/).

   /C.f./ functions
   - ufun:create-keybindings
   - ufun:create-leader-local-keybindings
   - ufun:create-leader-evil-keybindings
   #+BEGIN_SRC emacs-lisp
     (require 'evil)
     (require 'undo-fu)
     (require 'evil-escape)
     (evil-mode 1)
     (evil-escape-mode t)
     (evil-select-search-module 'evil-search-module 'evil-search)

     (define-key evil-insert-state-map "\M-n" 'hippie-expand)
     (define-key evil-normal-state-map "u" 'undo-fu-only-undo)
     (define-key evil-normal-state-map "\C-r" 'undo-fu-only-redo)

     (setq-default evil-escape-key-sequence "hh"
                   evil-escape-excluded-states '(normal visual motion)
                   evil-escape-delay 0.2)

     (ufun:create-keybindings
      evil-motion-state-map
      '((";"  . evil-ex)
        (":"  . evil-repeat-find-char)
        ("gc" . comment-dwim)
        ("zg" . ufun:add-word-to-dictionary)))

     (define-prefix-command 'uvar:evil-leader-keymap)

     ;; NOTE: Using evil-define-key here will not bind additional mappings from other plugins for some reason. We need to use define-key.
     (define-key evil-motion-state-map (kbd "SPC") 'uvar:evil-leader-keymap)

     (setq uvar:evil-leader-bindings
           '(("<" . bookmark-set)
             ("," . bookmark-bmenu-list)
             ("." . ibuffer)
             ("C" . count-words-region)
             ("c" . compile)
             ("r" . ufun:goto-previous-buffer)
             ("A" . apropos)
             ("a" . align-regexp)
             ("O" . occur)
             ("o" . switch-to-buffer)
             ("E" . server-edit)
             ("e" . find-file)
             ("T" . eval-expression)
             ("t" . execute-extended-command)
             ("n" . yank-pop)
             ("s" . sort-lines)
             ("W" . whitespace-cleanup)
             ("w" . whitespace-mode)))

     (ufun:create-keybindings uvar:evil-leader-keymap uvar:evil-leader-bindings)

     ;; NOTE: The following keybindings only affect the particular mode.

     (ufun:create-leader-local-keybindings
      "SPC"
      'dired-mode-hook
      'uvar:evil-leader-dired-keymap
      (append uvar:evil-leader-bindings
              '(("mG" . end-of-buffer)
                ("mg" . beginning-of-buffer)
                ("mw" . wdired-change-to-wdired-mode))))

     (add-hook 'ibuffer-mode-hook
               '(lambda () (local-set-key (kbd "SPC") 'uvar:evil-leader-keymap)))

     (ufun:create-leader-evil-keybindings
      "SPC"
      emacs-lisp-mode-map
      'motion
      'uvar:evil-leader-elisp-keymap
      (append uvar:evil-leader-bindings '(("me" . eval-last-sexp))))

     (ufun:create-leader-evil-keybindings
      "SPC"
      org-mode-map
      'motion
      'uvar:evil-leader-org-keymap
      (append uvar:evil-leader-bindings
              '(("mA" . ufun:org-archive-confirm)
                ("ma" . org-archive-subtree)
                ("mc" . org-copy-subtree)
                ("md" . org-demote-subtree)
                ("mi" . org-insert-heading)
                ("mp" . org-promote-subtree)
                ("mx" . org-cut-subtree))))
    #+END_SRC
** Programming Languages
   #+BEGIN_SRC emacs-lisp
     (require 'json-mode)
     (setq js-indent-level uvar:default-indent)
     (add-to-list 'auto-mode-alist '("\\.eslintrc\\'"   . json-mode))
     (add-to-list 'auto-mode-alist '("\\.prettierrc\\'" . json-mode))

     (require 'markdown-mode)
     (cond ((string-equal system-type "gnu/linux")
            (setq markdown-command "/usr/bin/pandoc"))
           ((string-equal system-type "darwin")
            (setq markdown-command "/usr/local/bin/pandoc")))
     (add-to-list 'auto-mode-alist '("\\.md\\'" . gfm-mode))
     (add-hook 'markdown-mode-hook 'flyspell-mode)
     (add-hook 'markdown-mode-hook '(lambda () (setq-local fill-column uvar:default-column)))

     (require 'rust-mode)
     (require 'toml-mode)
   #+END_SRC
